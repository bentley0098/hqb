{"version":3,"sources":["App.js","returnTasks.js","reportWebVitals.js","index.js"],"names":["columns","name","header","type","defaultFlex","maxWidth","minWidth","sortable","gridStyle","minHeight","margin","historyColumns","App","useState","show","setShow","handleClose","taskID","setTaskID","tasks","setTasks","history","setHistory","useEffect","mounted","fetch","then","data","json","items","getHistory","onRowDoubleClick","useCallback","rowProps","Task","onRenderRow","onDoubleClick","event","gridRef","setGridRef","handle","idProperty","pagination","dataSource","style","theme","Button","variant","onClick","current","visibleColumns","map","c","join","rows","id","contents","concat","console","dir","blob","fileName","link","document","createElement","url","URL","createObjectURL","setAttribute","position","visibility","body","appendChild","click","removeChild","downloadBlob","Blob","Modal","onHide","Header","closeButton","Title","Body","Footer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.51e73eaa.chunk.js","sourcesContent":["// Importing dependencies required for React, DataGrid, Bootstrap Stylings etc. \nimport React, {  useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport ReactDataGrid from '@inovua/reactdatagrid-enterprise'\nimport '@inovua/reactdatagrid-enterprise/index.css'\nimport '@inovua/reactdatagrid-enterprise/theme/default-dark.css'\nimport '@inovua/reactdatagrid-enterprise/theme/default-light.css'\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Modal from 'react-bootstrap/Modal'\n\n\n\n\n// Importing getTasks() to fetch data from express.js server\nimport {getTasks, getHistory} from './returnTasks.js'\n\n\n// Setting up columns and styling for DataGrid\nconst columns = [\n  {name:'Task', header:'ID', type: 'number', defaultFlex: 1, maxWidth:70},\n  {name:'Customer', header:'Customer', defaultFlex: 1, maxWidth: 250},\n  {name:'Details', header:'Details', defaultFlex: 1, minWidth: 500},\n  {name:'Area', header:'Area', defaultFlex: 1, maxWidth: 90},\n  {name:'Application', header:'Section', defaultFlex: 1, maxWidth: 100},\n  {name:'Contact', header:'Contact', defaultFlex: 1, maxWidth: 100},\n  {name:'Last Comment', header:'Last Comment', defaultFlex: 1},\n  {name:'Requested', header:'Requested', defaultFlex: 1, maxWidth: 115, sortable: false},\n  {name:'Updated', header:'Updated', defaultFlex: 1, maxWidth: 115, sortable: false},\n  {name:'DueDate', header:'Due Date', defaultFlex: 1, maxWidth: 115, sortable: false},\n  {name:'P', header:'P', type: 'number', defaultFlex: 1, maxWidth: 60},\n  {name:'Owner_Name', header:'Owner', defaultFlex: 1, maxWidth: 100}\n]\nconst gridStyle = {\n  minHeight: 800,\n  margin: 15\n}\nconst theme = 'default-dark'\n\nconst historyColumns = [\n  {name: 'Username', header: 'User'},\n  {name: 'Datetime', header: 'When'},\n  {name: 'Notes', header: 'Notes'}\n] \n\n// --Export DataGrid to Excel-- //\nconst downloadBlob = (blob, fileName = 'grid-data.csv') => {\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  \n  link.setAttribute('href', url);\n  link.setAttribute('download', fileName);\n  link.style.position = 'absolute';\n  link.style.visibility = 'hidden';\n\n  document.body.appendChild(link);\n\n  link.click();\n\n  document.body.removeChild(link);\n};\n\nconst SEPARATOR = ',';\n\n\n// Main App Function for loading web page\nfunction App() {\n  // Hooks for handling Bootstrap Modal\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  var [taskID, setTaskID] = useState(' ')\n  // Hooks for dealing with imported DataGrid data\n   const [tasks, setTasks] = useState([])\n   const [history, setHistory] = useState([])\n  // Use Effect Hook to load data on page load (comparable to componentDidMount())\n  useEffect(() => {\n   let mounted = true;\n   getTasks()\n     .then(items => {\n       if(mounted) {\n         setTasks(items)\n       }\n     })\n   return () => mounted = false;\n }, [])\n\n\n  // Use Effect Hook to load data on page load (comparable to componentDidMount())\n  useEffect(() => {\n    let mounted = true;\n    getHistory(taskID)\n      .then(items => {\n        if(mounted) {\n          setHistory(items)\n        }\n      })\n    return () => mounted = false;\n  }, [taskID])\n\n\n  // Functions to handle Double Click on any row within the DataGrid\n  const onRowDoubleClick = useCallback((rowProps) => {\n    //alert('Double-Clicked on row with task ID: ' + rowProps.data.Task)\n    handleShow()\n    var taskID = rowProps.data.Task;\n    setTaskID(taskID)\n    \n  }, []);\n\n  \n  const onRenderRow = useCallback((rowProps) => {\n    // save the original handler to be called later\n    const { onDoubleClick } = rowProps;\n    \n    rowProps.onDoubleClick = (event) => {\n      onRowDoubleClick(rowProps);\n      if (onDoubleClick) {\n        onDoubleClick(event);\n      }\n    };\n  }, [onRowDoubleClick])\n\n  // -- Exporting DataGrid to Excel -- //\n  const [gridRef, setGridRef] = useState(null);\n  const exportCSV = () => {\n    const columns = gridRef.current.visibleColumns;\n    \n    const header = columns.map((c) => c.name).join(SEPARATOR);\n    const rows = gridRef.current.data.map((data) => columns.map((c) => data[c.id]).join(SEPARATOR));\n\n    const contents = [header].concat(rows).join('\\n');\n\n  console.dir(contents);\n    const blob = new Blob([contents], { type: 'text/csv;charset=utf-8;' });\n\n    downloadBlob(blob);\n  };\n  \n  \n  // Returning HTML data to user.\n  return(\n    <div>\n      <ReactDataGrid\n        handle={setGridRef}\n        idProperty=\"id\"\n        columns={columns}\n        pagination\n        dataSource={tasks}\n        style={gridStyle}\n        theme={theme}\n        onRenderRow={onRenderRow}\n        \n      />\n      <Button variant=\"success\" style={{margin:10}} onClick={exportCSV}>\n         EXPORT TO EXCEL\n      </Button>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Task: {taskID}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ReactDataGrid \n            columns={historyColumns}\n            dataSource={history}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n\nexport default App;\n","export function getTasks() {\r\n    return fetch('/tasks')\r\n      .then(data => data.json())\r\n  }\r\n\r\n  export function getHistory(taskID) {\r\n    return fetch('/taskHistory/' + taskID)\r\n      .then(data => data.json())\r\n  }\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}